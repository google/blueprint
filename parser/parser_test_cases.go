// Copyright 2017 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file is autogenerated by parser_test_generator.go
package parser

var parserTestCases = getParserTestCases()

func getParserTestCases() []parserTestCase {
	return []parserTestCase{
		{
			"empty module",
			`foo {}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(0, 1, 1),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								nil,
								b.Pos(4, 1, 5),
							),
							nil,
							b.Pos(4, 1, 5),
						),
						nil,
						b.Pos(0, 1, 1),
					),
				)
				return b.Build()
			},
		},
		{
			"empty module with newline",
			`foo {
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(0, 1, 1),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(4, 1, 5),
									),
								},
								b.Pos(4, 1, 5),
							),
							nil,
							b.Pos(4, 1, 5),
						),
						nil,
						b.Pos(0, 1, 1),
					),
				)
				return b.Build()
			},
		},
		{
			"module with string property",
			`
			foo {
				name: "abc",
			}`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"name",
										b.String(
											nil,
											"abc",
											nil,
											b.Pos(18, 3, 9),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"module with bool property",
			`
			foo {
				isGood: true,
			}
				`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"isGood",
										b.Bool(
											nil,
											true,
											nil,
											b.Pos(20, 3, 11),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"module with multiline list property",
			`
			foo {
				stuff: ["asdf", "jkl;", "qwert",
					"uiop", "bnm,",

					"zxcv "]
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"stuff",
										b.List(
											nil,
											b.ListBody(
												nil,
												[]Expression{
													b.String(
														nil,
														"asdf",
														nil,
														b.Pos(21, 3, 12),
													),
													b.String(
														nil,
														"jkl;",
														nil,
														b.Pos(28, 3, 19),
													),
													b.String(
														nil,
														"qwert",
														nil,
														b.Pos(36, 3, 27),
													),
													b.String(
														nil,
														"uiop",
														nil,
														b.Pos(45, 3, 36),
													),
													b.String(
														nil,
														"bnm,",
														nil,
														b.Pos(58, 4, 12),
													),
													b.String(
														[]*Comment{
															b.Comment(
																NewBlankLine(),
																b.Pos(66, 4, 20),
															),
															b.Comment(
																NewBlankLine(),
																b.Pos(66, 4, 20),
															),
														},
														"zxcv ",
														nil,
														b.Pos(66, 4, 20),
													),
												},
												true,
												nil,
												b.Pos(28, 3, 19),
											),
											nil,
											b.Pos(28, 3, 19),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"module with singleline list property",
			`
			foo {
				stuff: ["asdf", "jkl;", "qwert", "uiop", "bnm,"]
			}
				`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"stuff",
										b.List(
											nil,
											b.ListBody(
												nil,
												[]Expression{
													b.String(
														nil,
														"asdf",
														nil,
														b.Pos(21, 3, 12),
													),
													b.String(
														nil,
														"jkl;",
														nil,
														b.Pos(28, 3, 19),
													),
													b.String(
														nil,
														"qwert",
														nil,
														b.Pos(36, 3, 27),
													),
													b.String(
														nil,
														"uiop",
														nil,
														b.Pos(45, 3, 36),
													),
													b.String(
														nil,
														"bnm,",
														nil,
														b.Pos(53, 3, 44),
													),
												},
												true,
												nil,
												b.Pos(28, 3, 19),
											),
											nil,
											b.Pos(28, 3, 19),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"empty list with a comment",
			`
			foo {
				stuff: [/* nothing here */]
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"stuff",
										b.List(
											nil,
											b.ListBody(
												nil,
												[]Expression{},
												false,
												[]*Comment{
													b.Comment(
														NewInlineComment(" nothing here "),
														b.Pos(21, 3, 12),
													),
												},
												b.Pos(40, 3, 31),
											),
											nil,
											b.Pos(40, 3, 31),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"list with one element",
			`
			foo {
				stuff: ["asdf"]
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"stuff",
										b.List(
											nil,
											b.ListBody(
												nil,
												[]Expression{
													b.String(
														nil,
														"asdf",
														nil,
														b.Pos(21, 3, 12),
													),
												},
												false,
												nil,
												b.Pos(28, 3, 19),
											),
											nil,
											b.Pos(28, 3, 19),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"module with nested struct",
			`
			foo {
				stuff: {
					isGood: true,
					name: "bar"
				}
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"stuff",
										b.Map(
											nil,
											b.MapBody(
												nil,
												[]*Property{
													b.Prop(
														nil,
														"isGood",
														b.Bool(
															nil,
															true,
															nil,
															b.Pos(34, 4, 12),
														),
														nil,
														b.Pos(28, 4, 6),
													),
													b.Prop(
														nil,
														"name",
														b.String(
															nil,
															"bar",
															nil,
															b.Pos(51, 5, 10),
														),
														nil,
														b.Pos(47, 5, 6),
													),
												},
												nil,
												b.Pos(21, 3, 12),
											),
											nil,
											b.Pos(21, 3, 12),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"commented module 1",
			`
			// comment1
			foo /* test */ {
				// comment2
				isGood: true,  // comment3
			} // comment 4
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewFullLineComment(" comment1"),
								b.Pos(0, 0, 0),
							),
						},
						b.Token(
							nil,
							"foo",
							[]*Comment{
								b.Comment(
									NewInlineComment(" test "),
									b.Pos(19, 3, 4),
								),
							},
							b.Pos(23, 3, 8),
						),
						b.Map(
							nil,
							b.MapBody(
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(34, 3, 19),
									),
									b.Comment(
										NewFullLineComment(" comment2"),
										b.Pos(34, 3, 19),
									),
								},
								[]*Property{
									b.Prop(
										nil,
										"isGood",
										b.Bool(
											nil,
											true,
											nil,
											b.Pos(62, 5, 11),
										),
										[]*Comment{
											b.Comment(
												NewFullLineComment(" comment3"),
												b.Pos(68, 5, 17),
											),
										},
										b.Pos(56, 5, 5),
									),
								},
								nil,
								b.Pos(34, 3, 19),
							),
							nil,
							b.Pos(34, 3, 19),
						),
						[]*Comment{
							b.Comment(
								NewFullLineComment(" comment 4"),
								b.Pos(86, 6, 4),
							),
						},
						b.Pos(23, 3, 8),
					),
				)
				return b.Build()
			},
		},
		{
			"two modules",
			`
			foo {
				name: "abc",
			}

			bar {
				name: "def",
			}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"name",
										b.String(
											nil,
											"abc",
											nil,
											b.Pos(18, 3, 9),
										),
										nil,
										b.Pos(14, 3, 5),
									),
								},
								nil,
								b.Pos(8, 2, 8),
							),
							nil,
							b.Pos(8, 2, 8),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(30, 4, 4),
							),
						},
						b.Token(
							nil,
							"bar",
							nil,
							b.Pos(36, 6, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{
									b.Prop(
										nil,
										"name",
										b.String(
											nil,
											"def",
											nil,
											b.Pos(50, 7, 9),
										),
										nil,
										b.Pos(46, 7, 5),
									),
								},
								nil,
								b.Pos(40, 6, 8),
							),
							nil,
							b.Pos(40, 6, 8),
						),
						nil,
						b.Pos(36, 6, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"variable assignments",
			`
			foo = "stuff"
			bar = foo
			baz = foo + bar
			boo = baz
			boo += foo`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"foo",
							nil,
							b.Pos(8, 2, 8),
						),
						b.String(
							nil,
							"stuff",
							nil,
							b.Pos(71, 6, 9),
						),
						b.String(
							nil,
							"stuff",
							nil,
							b.Pos(71, 6, 9),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(10, 2, 10),
						),
						true,
						nil,
						b.Pos(8, 2, 8),
					),
				)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"bar",
							nil,
							b.Pos(25, 3, 8),
						),
						b.Variable(
							nil,
							b.Token(
								nil,
								"foo",
								nil,
								b.Pos(25, 3, 8),
							),
							b.String(
								nil,
								"stuff",
								nil,
								b.Pos(71, 6, 9),
							),
							nil,
							b.Pos(44, 4, 14),
						),
						b.Variable(
							nil,
							b.Token(
								nil,
								"foo",
								nil,
								b.Pos(25, 3, 8),
							),
							b.String(
								nil,
								"stuff",
								nil,
								b.Pos(71, 6, 9),
							),
							nil,
							b.Pos(44, 4, 14),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(27, 3, 10),
						),
						true,
						nil,
						b.Pos(25, 3, 8),
					),
				)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"baz",
							nil,
							b.Pos(38, 4, 8),
						),
						b.Operator(
							nil,
							b.String(
								nil,
								"+",
								nil,
								b.Pos(40, 4, 10),
							),
							b.String(
								nil,
								"stuffstuff",
								nil,
								b.Pos(0, 0, 0),
							),
							[2]Expression{
								b.Variable(
									nil,
									b.Token(
										nil,
										"foo",
										nil,
										b.Pos(38, 4, 8),
									),
									b.String(
										nil,
										"stuff",
										nil,
										b.Pos(71, 6, 9),
									),
									nil,
									b.Pos(38, 4, 8),
								),
								b.Variable(
									nil,
									b.Token(
										nil,
										"bar",
										nil,
										b.Pos(44, 4, 14),
									),
									b.Variable(
										nil,
										b.Token(
											nil,
											"foo",
											nil,
											b.Pos(25, 3, 8),
										),
										b.String(
											nil,
											"stuff",
											nil,
											b.Pos(71, 6, 9),
										),
										nil,
										b.Pos(44, 4, 14),
									),
									nil,
									b.Pos(44, 4, 14),
								),
							},
							nil,
							b.Pos(57, 5, 8),
						),
						b.Operator(
							nil,
							b.String(
								nil,
								"+",
								nil,
								b.Pos(40, 4, 10),
							),
							b.String(
								nil,
								"stuffstuff",
								nil,
								b.Pos(0, 0, 0),
							),
							[2]Expression{
								b.Variable(
									nil,
									b.Token(
										nil,
										"foo",
										nil,
										b.Pos(38, 4, 8),
									),
									b.String(
										nil,
										"stuff",
										nil,
										b.Pos(71, 6, 9),
									),
									nil,
									b.Pos(38, 4, 8),
								),
								b.Variable(
									nil,
									b.Token(
										nil,
										"bar",
										nil,
										b.Pos(44, 4, 14),
									),
									b.Variable(
										nil,
										b.Token(
											nil,
											"foo",
											nil,
											b.Pos(25, 3, 8),
										),
										b.String(
											nil,
											"stuff",
											nil,
											b.Pos(71, 6, 9),
										),
										nil,
										b.Pos(44, 4, 14),
									),
									nil,
									b.Pos(44, 4, 14),
								),
							},
							nil,
							b.Pos(57, 5, 8),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(46, 4, 16),
						),
						true,
						nil,
						b.Pos(38, 4, 8),
					),
				)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"boo",
							nil,
							b.Pos(57, 5, 8),
						),
						b.Operator(
							nil,
							b.String(
								nil,
								"+",
								nil,
								b.Pos(0, 0, 0),
							),
							b.String(
								nil,
								"stuffstuffstuff",
								nil,
								b.Pos(0, 0, 0),
							),
							[2]Expression{
								b.Variable(
									nil,
									b.Token(
										nil,
										"baz",
										nil,
										b.Pos(57, 5, 8),
									),
									b.Operator(
										nil,
										b.String(
											nil,
											"+",
											nil,
											b.Pos(40, 4, 10),
										),
										b.String(
											nil,
											"stuffstuff",
											nil,
											b.Pos(0, 0, 0),
										),
										[2]Expression{
											b.Variable(
												nil,
												b.Token(
													nil,
													"foo",
													nil,
													b.Pos(38, 4, 8),
												),
												b.String(
													nil,
													"stuff",
													nil,
													b.Pos(71, 6, 9),
												),
												nil,
												b.Pos(38, 4, 8),
											),
											b.Variable(
												nil,
												b.Token(
													nil,
													"bar",
													nil,
													b.Pos(44, 4, 14),
												),
												b.Variable(
													nil,
													b.Token(
														nil,
														"foo",
														nil,
														b.Pos(25, 3, 8),
													),
													b.String(
														nil,
														"stuff",
														nil,
														b.Pos(71, 6, 9),
													),
													nil,
													b.Pos(44, 4, 14),
												),
												nil,
												b.Pos(44, 4, 14),
											),
										},
										nil,
										b.Pos(57, 5, 8),
									),
									nil,
									b.Pos(57, 5, 8),
								),
								b.Variable(
									nil,
									b.Token(
										nil,
										"foo",
										nil,
										b.Pos(71, 6, 9),
									),
									b.String(
										nil,
										"stuff",
										nil,
										b.Pos(71, 6, 9),
									),
									nil,
									b.Pos(71, 6, 9),
								),
							},
							nil,
							b.Pos(0, 0, 0),
						),
						b.Variable(
							nil,
							b.Token(
								nil,
								"baz",
								nil,
								b.Pos(57, 5, 8),
							),
							b.Operator(
								nil,
								b.String(
									nil,
									"+",
									nil,
									b.Pos(40, 4, 10),
								),
								b.String(
									nil,
									"stuffstuff",
									nil,
									b.Pos(0, 0, 0),
								),
								[2]Expression{
									b.Variable(
										nil,
										b.Token(
											nil,
											"foo",
											nil,
											b.Pos(38, 4, 8),
										),
										b.String(
											nil,
											"stuff",
											nil,
											b.Pos(71, 6, 9),
										),
										nil,
										b.Pos(38, 4, 8),
									),
									b.Variable(
										nil,
										b.Token(
											nil,
											"bar",
											nil,
											b.Pos(44, 4, 14),
										),
										b.Variable(
											nil,
											b.Token(
												nil,
												"foo",
												nil,
												b.Pos(25, 3, 8),
											),
											b.String(
												nil,
												"stuff",
												nil,
												b.Pos(71, 6, 9),
											),
											nil,
											b.Pos(44, 4, 14),
										),
										nil,
										b.Pos(44, 4, 14),
									),
								},
								nil,
								b.Pos(57, 5, 8),
							),
							nil,
							b.Pos(57, 5, 8),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(59, 5, 10),
						),
						false,
						nil,
						b.Pos(57, 5, 8),
					),
				)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"boo",
							nil,
							b.Pos(71, 6, 9),
						),
						b.Variable(
							nil,
							b.Token(
								nil,
								"foo",
								nil,
								b.Pos(71, 6, 9),
							),
							b.String(
								nil,
								"stuff",
								nil,
								b.Pos(71, 6, 9),
							),
							nil,
							b.Pos(71, 6, 9),
						),
						b.Variable(
							nil,
							b.Token(
								nil,
								"foo",
								nil,
								b.Pos(71, 6, 9),
							),
							b.String(
								nil,
								"stuff",
								nil,
								b.Pos(71, 6, 9),
							),
							nil,
							b.Pos(71, 6, 9),
						),
						b.Token(
							nil,
							"+=",
							nil,
							b.Pos(73, 6, 11),
						),
						false,
						nil,
						b.Pos(71, 6, 9),
					),
				)
				return b.Build()
			},
		},
		{
			"comments without module",
			`
			// comment1
			// comment2

			/* comment3
			   comment4 */
			// comment5

			/* comment6 */ /* comment7 */ // comment8
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Comment(
						NewBlankLine(),
						b.Pos(0, 0, 0),
					),
				)
				b.Add(
					b.Comment(
						NewFullLineComment(" comment1"),
						b.Pos(0, 0, 0),
					),
				)
				b.Add(
					b.Comment(
						NewFullLineComment(" comment2"),
						b.Pos(4, 2, 4),
					),
				)
				b.Add(
					b.Comment(
						NewBlankLine(),
						b.Pos(19, 3, 4),
					),
				)
				b.Add(
					b.Comment(
						NewInlineComment(" comment3\n   comment4 "),
						b.Pos(19, 3, 4),
					),
				)
				b.Add(
					b.Comment(
						NewBlankLine(),
						b.Pos(35, 5, 4),
					),
				)
				b.Add(
					b.Comment(
						NewFullLineComment(" comment5"),
						b.Pos(35, 5, 4),
					),
				)
				b.Add(
					b.Comment(
						NewBlankLine(),
						b.Pos(68, 7, 4),
					),
				)
				b.Add(
					b.Comment(
						NewInlineComment(" comment6 "),
						b.Pos(68, 7, 4),
					),
				)
				b.Add(
					b.Comment(
						NewInlineComment(" comment7 "),
						b.Pos(84, 9, 4),
					),
				)
				b.Add(
					b.Comment(
						NewFullLineComment(" comment8"),
						b.Pos(99, 9, 19),
					),
				)
				return b.Build()
			},
		},
		{
			"one assignment",
			`
			first = "one two three"
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"first",
							nil,
							b.Pos(10, 2, 10),
						),
						b.String(
							nil,
							"one two three",
							nil,
							b.Pos(10, 2, 10),
						),
						b.String(
							nil,
							"one two three",
							nil,
							b.Pos(10, 2, 10),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(12, 2, 12),
						),
						false,
						nil,
						b.Pos(10, 2, 10),
					),
				)
				return b.Build()
			},
		},
		{
			"comments before empty module",
			`
			//two comments
			//blank line

			emptyModule {}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewFullLineComment("two comments"),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewFullLineComment("blank line"),
								b.Pos(4, 2, 4),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(22, 3, 4),
							),
						},
						b.Token(
							nil,
							"emptyModule",
							nil,
							b.Pos(39, 5, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								nil,
								b.Pos(51, 5, 16),
							),
							nil,
							b.Pos(51, 5, 16),
						),
						nil,
						b.Pos(39, 5, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"commented modules 1",
			`
			//blank line 1

			emptyModule {
			} //trailing comment
			//trailing comment 2

			emptyModule2 {
			}
				`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewFullLineComment("blank line 1"),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(4, 2, 4),
							),
						},
						b.Token(
							nil,
							"emptyModule",
							nil,
							b.Pos(23, 4, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(35, 4, 16),
									),
								},
								b.Pos(35, 4, 16),
							),
							nil,
							b.Pos(35, 4, 16),
						),
						[]*Comment{
							b.Comment(
								NewFullLineComment("trailing comment"),
								b.Pos(40, 5, 4),
							),
						},
						b.Pos(23, 4, 4),
					),
				)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewFullLineComment("trailing comment 2"),
								b.Pos(42, 5, 6),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(64, 6, 4),
							),
						},
						b.Token(
							nil,
							"emptyModule2",
							nil,
							b.Pos(89, 8, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(102, 8, 17),
									),
								},
								b.Pos(102, 8, 17),
							),
							nil,
							b.Pos(102, 8, 17),
						),
						nil,
						b.Pos(89, 8, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"comment modules 2",
			`
			/*test {
				test: true,
			}*/

			test {
				/*test: true,*/
			}

			// This

			/* is here */

			anotherModule {}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewInlineComment("test {\ntest: true,\n}"),
								b.Pos(0, 0, 0),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(4, 2, 4),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(4, 2, 4),
							),
						},
						b.Token(
							nil,
							"test",
							nil,
							b.Pos(40, 6, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(45, 6, 9),
									),
									b.Comment(
										NewInlineComment("test: true,"),
										b.Pos(45, 6, 9),
									),
									b.Comment(
										NewBlankLine(),
										b.Pos(51, 7, 5),
									),
								},
								[]*Property{},
								nil,
								b.Pos(45, 6, 9),
							),
							nil,
							b.Pos(45, 6, 9),
						),
						nil,
						b.Pos(40, 6, 4),
					),
				)
				b.Add(
					b.Module(
						[]*Comment{
							b.Comment(
								NewBlankLine(),
								b.Pos(70, 8, 4),
							),
							b.Comment(
								NewFullLineComment(" This"),
								b.Pos(70, 8, 4),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(76, 10, 4),
							),
							b.Comment(
								NewInlineComment(" is here "),
								b.Pos(76, 10, 4),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(88, 12, 4),
							),
							b.Comment(
								NewBlankLine(),
								b.Pos(88, 12, 4),
							),
						},
						b.Token(
							nil,
							"anotherModule",
							nil,
							b.Pos(106, 14, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								nil,
								[]*Property{},
								nil,
								b.Pos(120, 14, 18),
							),
							nil,
							b.Pos(120, 14, 18),
						),
						nil,
						b.Pos(106, 14, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"list concatenation",
			`
			baseList = [
				"libext2fs",
				"libext2_blkid",
			]
			largerList = baseList + ["libc"]`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"baseList",
							nil,
							b.Pos(13, 2, 13),
						),
						b.List(
							nil,
							b.ListBody(
								nil,
								[]Expression{
									b.String(
										nil,
										"libext2fs",
										nil,
										b.Pos(15, 2, 15),
									),
									b.String(
										nil,
										"libext2_blkid",
										nil,
										b.Pos(32, 3, 16),
									),
								},
								true,
								nil,
								b.Pos(32, 3, 16),
							),
							nil,
							b.Pos(74, 6, 15),
						),
						b.List(
							nil,
							b.ListBody(
								nil,
								[]Expression{
									b.String(
										nil,
										"libext2fs",
										nil,
										b.Pos(15, 2, 15),
									),
									b.String(
										nil,
										"libext2_blkid",
										nil,
										b.Pos(32, 3, 16),
									),
								},
								true,
								nil,
								b.Pos(32, 3, 16),
							),
							nil,
							b.Pos(74, 6, 15),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(58, 5, 4),
						),
						true,
						nil,
						b.Pos(13, 2, 13),
					),
				)
				b.Add(
					b.Assignment(
						nil,
						b.Token(
							nil,
							"largerList",
							nil,
							b.Pos(74, 6, 15),
						),
						b.Operator(
							nil,
							b.String(
								nil,
								"+",
								nil,
								b.Pos(76, 6, 17),
							),
							b.List(
								nil,
								b.ListBody(
									nil,
									[]Expression{
										b.String(
											nil,
											"libext2fs",
											nil,
											b.Pos(0, 0, 0),
										),
										b.String(
											nil,
											"libext2_blkid",
											nil,
											b.Pos(0, 0, 0),
										),
										b.String(
											nil,
											"libc",
											nil,
											b.Pos(87, 6, 28),
										),
									},
									true,
									nil,
									b.Pos(0, 0, 0),
								),
								nil,
								b.Pos(0, 0, 0),
							),
							[2]Expression{
								b.Variable(
									nil,
									b.Token(
										nil,
										"baseList",
										nil,
										b.Pos(74, 6, 15),
									),
									b.List(
										nil,
										b.ListBody(
											nil,
											[]Expression{
												b.String(
													nil,
													"libext2fs",
													nil,
													b.Pos(15, 2, 15),
												),
												b.String(
													nil,
													"libext2_blkid",
													nil,
													b.Pos(32, 3, 16),
												),
											},
											true,
											nil,
											b.Pos(32, 3, 16),
										),
										nil,
										b.Pos(74, 6, 15),
									),
									nil,
									b.Pos(74, 6, 15),
								),
								b.List(
									nil,
									b.ListBody(
										nil,
										[]Expression{
											b.String(
												nil,
												"libc",
												nil,
												b.Pos(87, 6, 28),
											),
										},
										false,
										nil,
										b.Pos(94, 6, 35),
									),
									nil,
									b.Pos(94, 6, 35),
								),
							},
							nil,
							b.Pos(76, 6, 17),
						),
						b.Operator(
							nil,
							b.String(
								nil,
								"+",
								nil,
								b.Pos(76, 6, 17),
							),
							b.List(
								nil,
								b.ListBody(
									nil,
									[]Expression{
										b.String(
											nil,
											"libext2fs",
											nil,
											b.Pos(0, 0, 0),
										),
										b.String(
											nil,
											"libext2_blkid",
											nil,
											b.Pos(0, 0, 0),
										),
										b.String(
											nil,
											"libc",
											nil,
											b.Pos(87, 6, 28),
										),
									},
									true,
									nil,
									b.Pos(0, 0, 0),
								),
								nil,
								b.Pos(0, 0, 0),
							),
							[2]Expression{
								b.Variable(
									nil,
									b.Token(
										nil,
										"baseList",
										nil,
										b.Pos(74, 6, 15),
									),
									b.List(
										nil,
										b.ListBody(
											nil,
											[]Expression{
												b.String(
													nil,
													"libext2fs",
													nil,
													b.Pos(15, 2, 15),
												),
												b.String(
													nil,
													"libext2_blkid",
													nil,
													b.Pos(32, 3, 16),
												),
											},
											true,
											nil,
											b.Pos(32, 3, 16),
										),
										nil,
										b.Pos(74, 6, 15),
									),
									nil,
									b.Pos(74, 6, 15),
								),
								b.List(
									nil,
									b.ListBody(
										nil,
										[]Expression{
											b.String(
												nil,
												"libc",
												nil,
												b.Pos(87, 6, 28),
											),
										},
										false,
										nil,
										b.Pos(94, 6, 35),
									),
									nil,
									b.Pos(94, 6, 35),
								),
							},
							nil,
							b.Pos(76, 6, 17),
						),
						b.Token(
							nil,
							"=",
							nil,
							b.Pos(94, 6, 35),
						),
						false,
						nil,
						b.Pos(74, 6, 15),
					),
				)
				return b.Build()
			},
		},
		{
			"commented module with newlines",
			`
			myModule {

		    	// a blank line before a property remains as a blank line

		    	myProperty: "myValue",

		    	// a blank line after a property remains as a blank line

			}`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"myModule",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(13, 2, 13),
									),
									b.Comment(
										NewBlankLine(),
										b.Pos(13, 2, 13),
									),
									b.Comment(
										NewFullLineComment(" a blank line before a property remains as a blank line"),
										b.Pos(13, 2, 13),
									),
									b.Comment(
										NewBlankLine(),
										b.Pos(23, 4, 8),
									),
								},
								[]*Property{
									b.Prop(
										nil,
										"myProperty",
										b.String(
											nil,
											"myValue",
											nil,
											b.Pos(99, 6, 18),
										),
										[]*Comment{
											b.Comment(
												NewBlankLine(),
												b.Pos(110, 6, 29),
											),
											b.Comment(
												NewBlankLine(),
												b.Pos(110, 6, 29),
											),
											b.Comment(
												NewFullLineComment(" a blank line after a property remains as a blank line"),
												b.Pos(110, 6, 29),
											),
											b.Comment(
												NewBlankLine(),
												b.Pos(120, 8, 8),
											),
										},
										b.Pos(89, 6, 8),
									),
								},
								nil,
								b.Pos(13, 2, 13),
							),
							nil,
							b.Pos(13, 2, 13),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
		{
			"module with newlines",
			`
			moduleContainingSpaces {

			propertyOne: "ImFirst",

			propertyTwo: "ImLast",

				}
			`,
			func(testName string) (parseTree *ParseTree) {
				b := NewParseTreeBuilder(testName)
				b.Add(
					b.Module(
						nil,
						b.Token(
							nil,
							"moduleContainingSpaces",
							nil,
							b.Pos(4, 2, 4),
						),
						b.Map(
							nil,
							b.MapBody(
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(27, 2, 27),
									),
									b.Comment(
										NewBlankLine(),
										b.Pos(27, 2, 27),
									),
								},
								[]*Property{
									b.Prop(
										nil,
										"propertyOne",
										b.String(
											nil,
											"ImFirst",
											nil,
											b.Pos(44, 4, 15),
										),
										[]*Comment{
											b.Comment(
												NewBlankLine(),
												b.Pos(55, 4, 26),
											),
											b.Comment(
												NewBlankLine(),
												b.Pos(55, 4, 26),
											),
										},
										b.Pos(33, 4, 4),
									),
									b.Prop(
										nil,
										"propertyTwo",
										b.String(
											nil,
											"ImLast",
											nil,
											b.Pos(72, 6, 15),
										),
										nil,
										b.Pos(61, 6, 4),
									),
								},
								[]*Comment{
									b.Comment(
										NewBlankLine(),
										b.Pos(82, 6, 25),
									),
								},
								b.Pos(27, 2, 27),
							),
							nil,
							b.Pos(27, 2, 27),
						),
						nil,
						b.Pos(4, 2, 4),
					),
				)
				return b.Build()
			},
		},
	}
}
